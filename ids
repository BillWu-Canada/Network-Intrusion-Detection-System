#!/usr/bin/env python

# Suppress warnings about missing IPv6 route and tcpdump bin
import logging
logging.getLogger("scapy.loading").setLevel(logging.ERROR)
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

from scapy.all import *
import sys
import dpkt


sinkhole_list = []
arp_dict = {}
arp_spoof_list = []
worm_pattern = []



def check_spoofed_packet(packet):
    src = packet[IP].src
    dst = packet[IP].dst
    
    src_first = src.split(".", 1)[0]
    dst_first = dst.split(".", 1)[0]
    
    #print "src: " + src_first + " dst: " + dst_first
    if src_first != "10" and dst_first != "10":
        print("[Spoofed IP address]: " + "src:" + src + ", dst:" + dst)
 
    
def check_unauthorized_servers(packet):
    flag = str(packet[TCP].flags)
    
    #print "flag: " + flag  #2,18,16
    src = packet[IP].src
    dst = packet[IP].dst     
    
    src_first = src.split(".", 1)[0]
    dst_first = dst.split(".", 1)[0]    

    if src_first != "10" and dst_first == "10" and flag == "2":
        print("[Attempted server connection]: " + "rem:" + src + ", srv:" + dst + ", port:" + str(packet.dport))
    
    if src_first == "10" and dst_first != "10" and flag == "18":
        print("[Accepted server connection]: " + "rem:" + dst + ", srv:" + src + ", port:" + str(packet.sport))
   

def check_sinkholes(packet):
    ancount = packet[DNS].ancount
    
    if ancount == 1 and packet[DNS].an.rdata in sinkhole_list:
        #print packet[IP].src + " " + packet[IP].dst
        print("[Sinkhole lookup]: " + "src:" + packet[IP].dst + ", host:" + packet[DNS].an.rrname[:-1] + ", ip:" + packet[DNS].an.rdata)
        

def check_ARP_spoof(packet):
    #print packet[ARP].show()
    op_code = packet[ARP].op
    ip = packet[ARP].psrc
    mac = packet[ARP].hwsrc
    
    if op_code == 2:
        if ip in arp_dict.keys():
            if arp_dict[ip] != mac:
                output = "[Potential ARP spoofing]: " + "ip:" + ip + ", old:" + arp_dict[ip].upper() + ", new:" + mac.upper()
                if output not in arp_spoof_list:
                    print (output)
                    arp_spoof_list.append(output)
        else:
            arp_dict[ip] = mac


def check_IIS_worm(packet):
    get_info = packet[Raw].load
    for pattern in worm_pattern:
        if pattern in get_info:
            print ("[Unicode IIS exploit]: " + "src:" + packet[IP].src + ", dst:" + packet[IP].dst)
            break    
    
    
def check_NTP_DDOS(packet):
    if len(packet[Raw].load) >= 4:
        symbol = packet[Raw].load[3]
        if symbol == "*":
            print ("[NTP DDoS]: " + "vic:" + packet[IP].src + ", srv:" + packet[IP].dst)    
    
    
        
def read_sinkholes(filename):
    #read sinkhole file
    with open(filename) as myfile:
        lines = myfile.readlines()
        
    for addr in lines:
        sinkhole_list.append(addr[:-1])
    #print sinkhole_list    
        

def read_worm_pattern(filename):
    with open(filename) as myfile:
        lines = myfile.readlines()
            
    for addr in lines:
        worm_pattern.append(addr[:-1])
    #print worm_pattern
        



def main():
    myfile = sys.argv[1]     
    
    read_sinkholes("sinkholes.txt")
    read_worm_pattern("worm_pattern.txt")

    #print myfile
    packet_count = 0
    total_size = 0
    
    all_packets = rdpcap(myfile)
    
    for packet in all_packets:
        packet_count += 1
        total_size += len(packet)
        
        # check spoofed packet
        if IP in packet:
            check_spoofed_packet(packet)
            
        # check unauthorized servers
        if TCP in packet:
            check_unauthorized_servers(packet)
            
        # check sinkholes
        if DNS in packet:
            check_sinkholes(packet)
            
        # check ARP spoof
        if ARP in packet:
            check_ARP_spoof(packet)
            
        # check IIS worms
        if IP in packet and TCP in packet and packet[TCP].dport == 80 and Raw in packet:
            check_IIS_worm(packet)
            
        # check NTP reflection DDos attacks
        if UDP in packet and packet[UDP].dport == 123 and Raw in packet:
            check_NTP_DDOS(packet)
                        
    # overall summary about packets    
    print ("Analyzed " + str(packet_count) + " packets, " + str(total_size) + " bytes")
        
        
        
# run the code
main()

